import MySQLdb

# The following section  was generated by the following command line
# ./manage.py inspectdb --database=istock -t AbstractFile,ExclusivityUser,tbl_AbstractFileTaxonomy,tbl_AbstractFileTaxonomyLog,tbl_AbstractFileTypeGroup,tbl_FileTaxonomy,user > istock_models.py
# When adding to the set of classes that will be used from the iStock DB remember to edit istock_router.py

from django.db import models

from mongo_access import MongoAccess

class AbstractFile(models.Model):
    ABSTRACT_TYPES = {1:'photo', 4:'flash', 7:'vector', 8:'video'}

    id = models.IntegerField(primary_key=True, db_column='ID')
    user_id = models.IntegerField(db_column='UserID')
    abstract_type_id = models.IntegerField(db_column='AbstractTypeID')
    volume_id = models.IntegerField(db_column='VolumeID')
    approval_id = models.IntegerField(db_column='ApprovalID')
    model_release_id = models.IntegerField(db_column='ModelReleaseID')
    previous_file_id = models.IntegerField(null=True, db_column='PreviousFileID', blank=True)
    title = models.CharField(max_length=21L, db_column='Title')
    raw_keywords = models.TextField(db_column='RawKeywords', blank=True)
    description = models.TextField(db_column='Description', blank=True)
    creator = models.CharField(max_length=21L, db_column='Creator', blank=True)
    copyright_name = models.CharField(max_length=21L, db_column='CopyrightName', blank=True)
    copyright_email = models.CharField(max_length=21L, db_column='CopyrightEmail', blank=True)
    copyright_url = models.CharField(max_length=21L, db_column='CopyrightUrl', blank=True)
    width = models.IntegerField(null=True, db_column='Width', blank=True)
    height = models.IntegerField(null=True, db_column='Height', blank=True)
    filesize = models.IntegerField(db_column='Filesize')
    multisize_aware = models.CharField(max_length=1L, db_column='MultisizeAware')
    status = models.CharField(max_length=7L, db_column='Status')
    reject_reason = models.TextField(db_column='RejectReason', blank=True)
    may_resubmit = models.CharField(max_length=1L, db_column='MayResubmit')
    adult_content = models.CharField(max_length=1L, db_column='AdultContent')
    allow_prints = models.CharField(max_length=1L, db_column='AllowPrints')
    collections = models.CharField(max_length=40L, db_column='Collections', blank=True)
    source_media = models.CharField(max_length=2L, db_column='SourceMedia')
    creation_date = models.DateTimeField(db_column='CreationDate')
    approval_time = models.DateTimeField(db_column='ApprovalTime')
    timestamp = models.DateTimeField(db_column='Timestamp')
    gen_ratings_average = models.DecimalField(decimal_places=4, null=True, max_digits=8, db_column='gen_RatingsAverage', blank=True)
    gen_ratings_number = models.IntegerField(null=True, db_column='gen_RatingsNumber', blank=True)
    gen_total_downloads = models.IntegerField(db_column='gen_TotalDownloads')
    gen_last_download_time = models.DateTimeField(db_column='gen_LastDownloadTime')
    gen_impressions = models.IntegerField(db_column='gen_Impressions')
    allow_exclusive_license = models.CharField(max_length=1L, db_column='AllowExclusiveLicense', blank=True)
    allow_extended_license = models.CharField(max_length=1L, db_column='AllowExtendedLicense', blank=True)
    buy_request_id = models.IntegerField(null=True, db_column='BuyRequestID', blank=True)
    fpu = models.CharField(max_length=1L, db_column='FPU')

    def __unicode__(self):
        return 'AbstractFile file id: %d; abstract type: %d; title: %s' % (self.id, self.abstract_type_id, self.title)

    def in_partner_program(self):
        return self.collections.find('GettyDistribution') != -1

    def file_type(self):
        """
        Get the text name of the abstract file type.
        """
        return AbstractFile.ABSTRACT_TYPES[int(self.abstract_type_id)]

    def collection_name(self):
        """
        Get the collection this file is in.

        Files in the Main collection don't have an entry.
        """
        try:
            file_taxonomy = AbstractFileTaxonomy.objects.get(abstract_file_id=self.id)
        except AbstractFileTaxonomy.DoesNotExist:
            return 'Main'
        return FileTaxonomy.objects.get(id=file_taxonomy.file_taxonomy_id).name

    def previous_collections(self):
        """
        The previous collections this file has been in
        """
        return AbstractFileTaxonomyLog.objects.filter(abstract_file_id=self.id).order_by('-date_changed')

    def contributor(self):
        return User.objects.get(user_id=self.user_id)

    def getty_id(self):
        mongo_access = MongoAccess()
        mongo_asset = mongo_access.get_asset(self.id)

        try:
            return mongo_asset['partnerData']['getty']['partnerId']
        except (KeyError, TypeError):
            # KeyError: mongo_asset doesn't have the one of 'partnerData',
            # 'getty', 'partnerId'
            # TypeError: mongo_asset is None
            return None

    def bluesky_status(self):
        mongo_access = MongoAccess()
        mongo_asset = mongo_access.get_asset(self.id)

        try:
            return mongo_asset['partnerData']['getty']['status']
        except (KeyError, TypeError):
            return None

    class Meta:
        db_table = 'AbstractFile'
        ordering = ['id']
        get_latest_by = 'creation_date'

class ExclusivityUser(models.Model):
    id = models.IntegerField(primary_key=True, db_column='ID')
    exclusivity_id = models.IntegerField(db_column='ExclusivityID')
    user_id = models.IntegerField(db_column='UserID')
    status = models.CharField(max_length=3L, db_column='Status')
    original_applied_date = models.DateTimeField(db_column='OriginalAppliedDate')
    original_approved_date = models.DateTimeField(db_column='OriginalApprovedDate')
    applied_cancellation = models.CharField(max_length=1L, db_column='AppliedCancellation')
    applied_cancellation_date = models.DateTimeField(db_column='AppliedCancellationDate')
    cancellation_reason = models.TextField(db_column='CancellationReason', blank=True)
    time_stamp = models.DateTimeField(db_column='TimeStamp')

    def name(self):
        return AbstractFileTypeGroup.objects.get(exclusivity_id=self.exclusivity_id).name

    class Meta:
        db_table = 'ExclusivityUser'


class AbstractFileTaxonomy(models.Model):
    abstract_file_id = models.IntegerField(primary_key=True, db_column='AbstractFileID')
    file_taxonomy_id = models.IntegerField(db_column='FileTaxonomyID')
    admin_id = models.IntegerField(db_column='AdminID')
    timestamp = models.DateTimeField(db_column='Timestamp')

    class Meta:
        db_table = 'tbl_AbstractFileTaxonomy'


class AbstractFileTaxonomyLog(models.Model):
    """
    Faking a primary key to get things working
    """
    # This is NOT a unique primary key for this table.
    # It's made up so Django won't have a melt down
    abstract_file_id = models.IntegerField(primary_key=True, db_column='AbstractFileID')
    old_taxonomy = models.IntegerField(db_column='OldTaxonomy')
    new_taxonomy = models.IntegerField(db_column='NewTaxonomy')
    admin_id = models.IntegerField(db_column='AdminID')
    date_changed = models.DateTimeField(db_column='DateChanged')

    class Meta:
        db_table = 'tbl_AbstractFileTaxonomyLog'
        ordering = ['-date_changed']
        get_latest_by = 'date_changed'
        unique_together = ('abstract_file_id', 'date_changed')

    def new_taxonomy_name(self):
        return FileTaxonomy.objects.get(id=self.new_taxonomy).name


class AbstractFileTypeGroup(models.Model):
    id = models.IntegerField(primary_key=True, db_column='ID')
    name = models.CharField(max_length=10L, db_column='Name')
    default_canister_level_id = models.IntegerField(db_column='DefaultCanisterLevelID')
    number_of_months_to_aggregate_download_counts = models.IntegerField(db_column='NumberOfMonthsToAggregateDownloadCounts')
    exclusivity_id = models.IntegerField(db_column='ExclusivityID')

    class Meta:
        db_table = 'tbl_AbstractFileTypeGroup'


class FileTaxonomy(models.Model):
    id = models.IntegerField(primary_key=True, db_column='ID')
    name = models.CharField(max_length=8L, db_column='Name')
    description = models.CharField(max_length=41L, db_column='Description')
    lock_duration = models.IntegerField(db_column='LockDuration')
    percent_allowed = models.IntegerField(null=True, db_column='PercentAllowed', blank=True)

    class Meta:
        db_table = 'tbl_FileTaxonomy'


class User(models.Model):
    user_id = models.IntegerField(primary_key=True, db_column='userID')
    username = models.CharField(max_length=10L)
    encrypted_password = models.CharField(max_length=85L, db_column='EncryptedPassword')
    first = models.CharField(max_length=21L)
    last = models.CharField(max_length=21L)
    address = models.CharField(max_length=85L)
    address2 = models.CharField(max_length=85L)
    city = models.CharField(max_length=21L)
    state_prov = models.CharField(max_length=21L)
    country = models.CharField(max_length=16L)
    country_id = models.IntegerField(db_column='CountryID')
    postal_code = models.CharField(max_length=4L)
    phone = models.CharField(max_length=6L)
    fax = models.CharField(max_length=6L, blank=True)
    email = models.CharField(max_length=85L)
    avatar_id = models.IntegerField(db_column='avatarID')
    creation_date = models.DateField()
    last_login_date = models.DateField()
    studio_name = models.CharField(max_length=100L, blank=True)
    studio_url = models.CharField(max_length=85L, blank=True)
    studio_phone = models.CharField(max_length=6L, blank=True)
    studio_fax = models.CharField(max_length=6L, blank=True)
    aim_account = models.CharField(max_length=21L)
    msn_account = models.CharField(max_length=21L)
    job = models.IntegerField()
    notes = models.TextField(blank=True)
    admin_notes = models.TextField(blank=True)
    picture_url = models.CharField(max_length=85L, blank=True)
    show_profile = models.CharField(max_length=0L)
    ban_posting = models.CharField(max_length=0L)
    ban_login = models.CharField(max_length=0L)
    ban_rating = models.CharField(max_length=0L)
    last_ip = models.CharField(max_length=5L, db_column='last_IP')
    num_logins = models.IntegerField()
    customers_default_address_id = models.IntegerField(null=True, blank=True)
    ul_application = models.CharField(max_length=2L)
    expresslane = models.CharField(max_length=0L)
    heard_about_istock = models.TextField(blank=True)
    color = models.CharField(max_length=3L, blank=True)
    base_color = models.CharField(max_length=3L, blank=True)
    upload_limit_id = models.IntegerField(db_column='uploadLimitID')
    recent_file_cnt = models.IntegerField()
    optin = models.CharField(max_length=3L)
    filter_content = models.CharField(max_length=1L)
    popup_mail = models.CharField(max_length=1L)
    queue_jumper = models.CharField(max_length=1L, db_column='QueueJumper')
    password_reset_code = models.CharField(max_length=10L, db_column='PasswordResetCode', blank=True)
    password_reset_time = models.DateTimeField(null=True, db_column='PasswordResetTime', blank=True)

    def exclusivity(self):
        """
        The file types this user is exclusive for.
        """
        return ExclusivityUser.objects.filter(user_id=self.user_id)

    def assets(self):
        """
        All the abstract files owned by this contributor
        """
        return AbstractFile.objects.filter(user_id=self.user_id)

    def shared_asset_count(self):
        mongo_access = MongoAccess()
        return mongo_access.get_shared_asset_count(self)

    def error_asset_count(self):
        mongo_access = MongoAccess()
        return mongo_access.get_shared_asset_count(self, 'error')

    def pending_asset_count(self):
        mongo_access = MongoAccess()
        return mongo_access.get_shared_asset_count(self, 'pending')

    def __unicode__(self):
        return 'User username: %s; id: %d' % (self.username, self.user_id)

    class Meta:
        db_table = 'user'
# End Generated section
